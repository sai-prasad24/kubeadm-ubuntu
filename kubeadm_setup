Kubernetes has become the de facto tool for managing containerized applications. While it offers incredible capabilities,
guides on installing Kubernetes and setting up a cluster can be elusive and quite complex, especially for beginners. In this article, 
we’ll walk you through a simplified approach to installing Kubernetes on an Ubuntu machine using a straightforward Bash shell script. 
This method streamlines the installation process, making it easier for those who are new to Kubernetes.

===================
Prerequisites:
===================
Two Ubuntu machines with sudo privileges. One as a master node and the other as a worker node.
Basic familiarity with the terminal and command-line interface
-------------------------------------------------------------------------------------------------------
=====================================================
Step 1: Create the Shell Script
=====================================================
To begin, the Kubernetes installation script needs to be executed as root user on the ubuntu machine chosen to be the master node. 
To achieve this, the user should be switched to root by executing the following command.

--------> sudo -i
Let’s create a Bash shell script that automates the Kubernetes installation process. Open your terminal and create a new file named install_kubernetes.sh using the following command:

--------> touch install_kubernetes.sh
Next, open the script in a text editor of your choice, such as nano or vim.

--------> nano install_kubernetes.sh
====================================================
Step 2: Add Installation Commands
====================================================
Inside the script file, you’ll add the necessary commands to install Kubernetes. We’ll use kubeadm, which simplifies the process by handling most of the heavy lifting.
------------------------------------------------------------------------------------------------------------
Copy and paste the following commands into the script:
========================================================================================================
#!/bin/bash
# common.sh
# copy this script and run in all master and worker nodes
#i1) Switch to root user [ sudo -i]
#2) Disable swap & add kernel settings
swapoff -a
sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
#3) Add  kernel settings & Enable IP tables(CNI Prerequisites)
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
modprobe overlay
modprobe br_netfilter
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
sysctl --system
#4) Install containerd run time
#To install containerd, first install its dependencies.
apt-get update -y
apt-get install ca-certificates curl gnupg lsb-release -y
#Note: We are not installing Docker Here.Since containerd.io package is part of docker apt repositories hence we added docker repository & it's key to download and install containerd.
# Add Docker’s official GPG key:
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
#Use follwing command to set up the repository:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
# Install containerd
apt-get update -y
apt-get install containerd.io -y
# Generate default configuration file for containerd
#Note: Containerd uses a configuration file located in /etc/containerd/config.toml for specifying daemon level options.
#The default configuration can be generated via below command.
containerd config default > /etc/containerd/config.toml
# Run following command to update configure cgroup as systemd for contianerd.
sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
# Restart and enable containerd service
systemctl restart containerd
systemctl enable containerd
#5) Installing kubeadm, kubelet and kubectl
# Update the apt package index and install packages needed to use the Kubernetes apt repository:
apt-get update
apt-get install -y apt-transport-https ca-certificates curl
# Download the Google Cloud public signing key:
curl -fsSL https://dl.k8s.io/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
# Add the Kubernetes apt repository:
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
# Update apt package index, install kubelet, kubeadm and kubectl, and pin their version:
apt-get update
apt-get install -y kubelet kubeadm kubectl
# apt-mark hold will prevent the package from being automatically upgraded or removed.
apt-mark hold kubelet kubeadm kubectl
# Enable and start kubelet service
systemctl daemon-reload
systemctl start kubelet
systemctl enable kubelet.service
======================================================================================================================================================
Save the file and exit the text editor.
------------------------------------------------------------------------------------------------------------------------------------------------
=============================
Step 4: Run the Script
============================
Now, you can run the script to initiate the Kubernetes installation:

-------> sh install_kubernetes.sh
The script will execute each command sequentially, setting up Kubernetes and its dependencies on your Ubuntu machine.

==========================================================================
Step 5: Initialize the control plane in the master node as the root user
==========================================================================
--------> kubeadm init

===================================================
Step 6: Set up kubeconfig as normal ubuntu user
====================================================
The kubeconfig file is a central configuration file that allows you to authenticate, interact with, and manage Kubernetes clusters effectively. 
It encapsulates authentication credentials, context information, cluster details, and more, making it a critical component for anyone working with Kubernetes clusters.

==============================================================================
#exit root as normal user
exit
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
================================================================================
#to verify, if kubectl is working or not, run the following command.
-----> kubectl get pod -A

==========================================================
Step 7: Deploy the network plugin (weave network)
==========================================================
Weave implements the Kubernetes Container Network Interface (CNI) as a plug-in and provides agents for Kubernetes to provide 
networking for containers and pods. In simple terms, weave provides a network to connect all pods together.

Run the following command to deploy the weave network
==============================================================================================
kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
#verify if weave is deployed successfully
kubectl get pods -A

=========================================================
Step 8: Create the master join token on the master node
=========================================================
This important step involves creating a token on the master node, which plays a crucial role in enabling the smooth 
integration of a worker node into a Kubernetes cluster. This integration is achieved through the execution of a specific command:

---------> kubeadm token create — print-join-command
By executing the above command, a token is generated on the master node. This token serves as a secure authentication mechanism, allowing the worker node to seamlessly join the cluster.

Example of the result of the above command
----------------------------------------------------------------------------------------------------------
kubeadm join 172.30.20.20:6443 — token cdm6fo.dhbrxyleqe5suy6e \
 — discovery-token-ca-cert-hash sha256:1fc51686afd16c46102c018acb71ef9537c1226e331840e7d401630b96298e7d
----------------------------------------------------------------------------------------------------------
=================================================
Step 9: Join worker node to Kubernetes cluster
=================================================
If you wish to add worker nodes to your cluster, perform Step 1 to Step 4 on your worker node. Then still on the worker 
node execute the join command generated on the master node to join the cluster.
-----------------------------------------------------------------------------------------------------------------
kubeadm join 172.30.20.20:6443 — token cdm6fo.dhbrxyleqe5suy6e \
 — discovery-token-ca-cert-hash sha256:1fc51686afd16c46102c018acb71ef9537c1226e331840e7d401630b96298e7d
-----------------------------------------------------------------------------------------------------------------
Note: Do not execute kubeadm init on worker node as the machine is not a master node that needs a control plane.

To verify worker node has successfully joined cluster. Execute the following command on the master node

---------> kubectl get nodes
Sample Result

NAME     STATUS   ROLES           AGE     VERSION
master   Ready    control-plane   4d18h   v1.28.0
node     Ready    <none>          4d18h   v1.28.0
Conclusion:
Setting up Kubernetes doesn’t have to be a daunting task. By using a simple Bash shell script, you can automate the installation 
process on your Ubuntu machine. This approach abstracts the complexities and allows you to focus on exploring Kubernetes’ powerful 
features without getting bogged down by the setup process. Happy Kuberneting!
